import numpy as np
import matplotlib.pyplot as plt
import pywt
#import pywt.data
#import pandas as pd

def func_round(number):
	if number >= 0:
		 if number - int(number) >= 0.5:
		 	return int(number) + 1
		 else:
		 	return int(number)
	elif number < 0:
		 if number - int(number)<=-0.5:
		 	return int(number) - 1
		 else:
		 	return int(number)
	else:
		print("请检查输入！")		

def diff_2point(data_x, data_y):
	diff_data=np.zeros_like(data_y)
	for i in range(len(data_y)-1):
		timestep = data_x[i+1] - data_x[i]
		data_step = (data_y[i+1] - data_y[i])
		diff_data[i] = data_step/timestep
	diff_data[-1] = (data_y[-1]-data_y[-2])/timestep
	return diff_data

# 该函数是用于将采样频率混合125Hz，250Hz，500Hz的位移捕捉离散信号通过线性插值调整为采样频率统一为最大频率500Hz的采样信号
def func_update_disp(para_time, para_disp, target_freq):
	max_freq = 1000
	timestep = 1/max_freq
	time_maxnum = np.arange(para_time[0], para_time[-1]+timestep, timestep)
	disp_maxnum = np.zeros_like(time_maxnum)
	s = 0
	for i in range(len(para_time)-1):
		# python取整函数int为向零方向取整，一定要注意一下，round为四舍五入函数，可以取整到小数位
		count = func_round((para_time[i+1] - para_time[i])/timestep)
		disp_step = (para_disp[i+1] - para_disp[i])/count
		s = s + count
		for j in range (count):
			disp_maxnum[s-count+j] = para_disp[i]+j*disp_step*np.random.normal(loc=1.0,scale=0.1)
	disp_maxnum[-1] = para_disp[-1]

	if max_freq%target_freq==0:
		timestep = 1 / target_freq
		time_update = np.arange(para_time[0], para_time[-1], timestep)
		disp_update = np.zeros_like(time_update)
		amp = func_round(max_freq/target_freq)
		for k in range (len(time_update)):
			disp_update[k] = disp_maxnum[amp*k]
	else:
		print('最大采样频率与目标频率不为整数倍关系！')
	return [time_update, disp_update]

def func_SNR(data):
	A_signal = np.max(data) - np.min(data)
	sub_data = data[1:] - data[:-1]
	A_noise = np.maximum(np.abs(np.max(sub_data)),np.abs(np.min(sub_data)))
	return 20*np.log10(A_signal/A_noise)

# time series与disp_series 为位移时程的捕捉原始数据，包含了采样频率为500Hz，采样频率为250Hz，采样频率为125Hz等不同的时间间隔
time_series = np.array([0,0.004,0.008,0.012,0.016,0.02,0.024,0.028,0.032,0.036,0.04,0.044,0.048,0.052,0.056,0.06,0.064,0.068,0.072,0.076,0.08,0.084,0.088,0.092,0.096,0.1,0.104,0.108,0.112,0.116,0.12,0.124,0.128,0.132,0.136,0.14,0.144,0.148,0.152,0.156,0.16,0.164,0.168,0.172,0.176,0.18,0.184,0.188,0.192,0.196,0.2,0.204,0.208,0.212,0.216,0.22,0.224,0.228,0.232,0.236,0.24,0.244,0.248,0.252,0.256,0.26,0.264,0.268,0.272,0.276,0.28,0.284,0.288,0.292,0.296,0.3,0.304,0.308,0.312,0.316,0.32,0.324,0.328,0.332,0.336,0.34,0.344,0.348,0.352,0.356,0.36,0.364,0.368,0.372,0.376,0.38,0.384,0.388,0.392,0.396,0.4,0.404,0.408,0.412,0.416,0.42,0.424,0.428,0.432,0.436,0.44,0.444,0.448,0.452,0.456,0.46,0.464,0.468,0.472,0.476,0.48,0.484,0.488,0.492,0.496,0.5,0.504,0.508,0.512,0.516,0.52,0.524,0.528,0.532,0.536,0.54,0.544,0.548,0.552,0.556,0.56,0.564,0.568,0.572,0.576,0.58,0.584,0.588,0.592,0.596,0.6,0.604,0.608,0.612,0.616,0.62,0.624,0.628,0.632,0.636,0.64,0.644,0.648,0.652,0.656,0.66,0.664,0.668,0.672,0.676,0.68,0.684,0.688,0.692,0.696,0.7,0.704,0.708,0.712,0.716,0.72,0.724,0.728,0.732,0.736,0.74,0.744,0.748,0.752,0.756,0.76,0.764,0.768,0.772,0.776,0.78,0.784,0.788,0.792,0.796,0.8,0.804,0.808,0.812,0.816,0.82,0.824,0.828,0.832,0.836,0.84,0.844,0.848,0.852,0.856,0.86,0.864,0.868,0.872,0.876,0.88,0.884,0.888,0.892,0.896,0.9,0.904,0.908,0.912,0.916,0.92,0.924,0.928,0.932,0.936,0.94,0.944,0.948,0.952,0.956,0.96,0.964,0.968,0.972,0.976,0.98,0.984,0.988,0.992,0.996,1])
disp_series = np.array([0,-0.035707357,-0.07521337,-0.115479113,-0.153465664,-0.19525087,-0.231717958,-0.271983701,-0.313009176,-0.351375592,-0.397719184,-0.436465465,-0.475971478,-0.518516414,-0.561821082,-0.600567363,-0.636274721,-0.675021002,-0.716046477,-0.761630337,-0.802655812,-0.84672021,-0.886985954,-0.931050352,-0.968277172,-1.005503991,-1.050328121,-1.093632789,-1.129340146,-1.170365621,-1.221267598,-1.264572266,-1.307876933,-1.351181601,-1.396765461,-1.444628515,-1.489452645,-1.536176102,-1.581633341,-1.624178277,-1.665963483,-1.710027881,-1.75409228,-1.798916409,-1.841461346,-1.877928434,-1.912876061,-1.943265301,-1.964537769,-1.991888086,-2.013160554,-2.04051087,-2.063302801,-2.086094731,-2.11055807,-2.131070807,-2.151583544,-2.173615743,-2.195647943,-2.220719066,-2.249588844,-2.27617943,-2.301250553,-2.327081407,-2.352152531,-2.377223654,-2.40457397,-2.429645094,-2.451677293,-2.478267878,-2.506377926,-2.533728242,-2.558799365,-2.589188606,-2.616538922,-2.643129507,-2.668960362,-2.693271754,-2.719862339,-2.745693194,-2.77304351,-2.804192481,-2.83306226,-2.860412576,-2.890042086,-2.919671595,-2.951580297,-2.982729269,-3.009319854,-3.038189632,-3.070098335,-3.101247306,-3.125558699,-3.151389553,-3.185577448,-3.215206958,-3.246355929,-3.273706245,-3.305614948,-3.339802843,-3.367912891,-3.399061862,-3.430970565,-3.462119536,-3.491749045,-3.523657748,-3.554806719,-3.589754346,-3.621663048,-3.650532826,-3.677883143,-3.709791845,-3.749297858,-3.78120656,-3.8115958,-3.84122531,-3.875413205,-3.910360832,-3.946068189,-3.980256085,-4.020521828,-4.052430531,-4.08206004,-4.117007666,-4.150967642,-4.185915269,-4.220103164,-4.253531329,-4.290758148,-4.327984968,-4.356854746,-4.397880221,-4.431308385,-4.470054667,-4.503482831,-4.539949919,-4.574137815,-4.612884096,-4.646312261,-4.685058542,-4.713928321,-4.740518906,-4.759512181,-4.772427608,-4.783823574,-4.789141691,-4.795219539,-4.792940346,-4.795219539,-4.795219539,-4.794459808,-4.794459808,-4.792940346,-4.794459808,-4.792940346,-4.792940346,-4.794459808,-4.794459808,-4.796739001,-4.794221739,-4.790226331,-4.794952628,-4.793830561,-4.794415208,-4.791781077,-4.792742307,-4.790793035,-4.79298679,-4.794708086,-4.794742245,-4.793089343,-4.793622104,-4.790577235,-4.793693295,-4.79505117,-4.792823352,-4.791710092,-4.793582096,-4.794789825,-4.791813866,-4.79293355,-4.794019982,-4.793599653,-4.792475604,-4.79088734,-4.791514952,-4.793856587,-4.792363163,-4.791434308,-4.792498204,-4.790666462,-4.790566082,-4.792079539,-4.795027055,-4.793441271,-4.790702806,-4.792435294,-4.792036603,-4.794174771,-4.792302204,-4.795095066,-4.794900921,-4.79319083,-4.794342845,-4.793724354,-4.793975556,-4.791661364,-4.794756608,-4.790731589,-4.794962761,-4.793113948,-4.791283512,-4.794627624,-4.792239082,-4.790613114,-4.793133951,-4.794517003,-4.790527021,-4.791374559,-4.793836439,-4.792137286,-4.794752675,-4.793245472,-4.790335937,-4.79094151,-4.794859046,-4.79121964,-4.794965449,-4.79503751,-4.793708578,-4.792265534,-4.793531856,-4.791406012,-4.794875419,-4.790903619,-4.793958445,-4.791720914,-4.793859563,-4.79203152,-4.790397452,-4.792539234,-4.793432177,-4.792434121,-4.791120264,-4.794599571,-4.794036194,-4.792686272,-4.790784727,-4.793873277,-4.791276255,-4.792415608])

time_updated, disp_updated = func_update_disp(time_series,disp_series, 500)
for ii in range(len(disp_updated)):
	print(disp_updated[ii])

velo_numerical = diff_2point(time_updated, disp_updated)
acce_numerical = diff_2point(time_updated, velo_numerical)
print('SNR_dB_disp=', func_SNR(disp_updated))
print('SNR_dB_veolocity=', func_SNR(velo_numerical))
print('SNR_dB_acceleration=', func_SNR(acce_numerical))
plt.plot(time_updated, acce_numerical)
plt.show()
